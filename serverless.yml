service: refresh

package:
  individually: true

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-west-3

  environment:
    ACCOUNT: '166257563783'
    REDDIT_CLIENT_ID: 'REDDIT_CLIENT_ID'
    REDDIT_CLIENT_SECRET: 'REDDIT_CLIENT_SECRET'
    REDDIT_TABLE: '${self:service}-${opt:stage, self:provider.stage}-reddit'
    REDDIT_TOPIC: 'arn:aws:sns:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNT}:${self:service}-${opt:stage, self:provider.stage}-reddit'

  iamRoleStatements:
    - Effect: Allow
      Action:
       - dynamodb:GetItem
       - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.REDDIT_TABLE}"
    - Effect: Allow
      Action: ssm:GetParameters
      Resource:
       - "arn:aws:ssm:${opt:region, self:provider.region}:*:parameter/${self:provider.environment.REDDIT_CLIENT_ID}"
       - "arn:aws:ssm:${opt:region, self:provider.region}:*:parameter/${self:provider.environment.REDDIT_CLIENT_SECRET}"
    - Effect: Allow
      Action: lambda:InvokeFunction
      Resource:
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function:${self:service}-${opt:stage, self:provider.stage}-get"
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function:${self:service}-${opt:stage, self:provider.stage}-hot"
        - "arn:aws:lambda:${opt:region, self:provider.region}:*:function:${self:service}-${opt:stage, self:provider.stage}-create"

functions:
  hot:
    handler: refresh/reddit/hot.hot
    events:
      - http:
          path: reddit/{subreddit}
          method: get
          cors: true
  batch_hot:
    handler: refresh/reddit/batch_hot.batch_hot
    events:
      - http:
          path: reddit/batch_hot
          method: post
          cors: true
  get:
    handler: refresh/dynamodb/get.get
    events:
      - http:
          path: dynamodb/{id}
          method: get
          cors: true
  batch_get:
    handler: refresh/dynamodb/batch_get.batch_get
    events:
      - http:
          path: dynamodb/batch_get
          method: post
          cors: true
  create:
    handler: refresh/dynamodb/create.create
    events:
      - http:
          path: dynamodb
          method: post
          cors: true
  batch_create:
    handler: refresh/dynamodb/batch_create.batch_create
    events:
      - http:
          path: dynamodb/batch_create
          method: post
          cors: true
  refresh_hot:
    handler: refresh/refresh_hot.refresh_hot
    events:
      - http:
          path: refresh/refresh_hot
          method: post
          cors: true
  publish:
    handler: refresh/notif/publish.publish
    events:
      - http:
          path: notif/publish
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
